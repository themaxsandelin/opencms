generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url = env("DATABASE_URL")
}

model PublishingEnvironment {
  id String @id @default(uuid())
  name String
  key String @unique
  contentVersionPublications ContentBlockVariantVersionPublication[]
  layoutVersionPublications PageLayoutVersionPublication[]
  pageInstaceLayoutPublications PageInstanceLayout[]
  formVersionPublications FormVersionPublication[]
  formVersionSubmissions FormVersionSubmission[]
  formVersionTokens FormVersionToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("environmentCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("environmentUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model Locale {
  id String @id @default(uuid())
  name String
  code String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("localeCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("localeUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model Site {
  id String @id @default(uuid())
  name String
  key String @unique
  pages Page[]
  contentBlockVariants ContentBlockVariantOnSite[]
  formVersionSubmissions FormVersionSubmission[]
  formVersionTokens FormVersionToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("siteCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("siteUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model Page {
  id String @id @default(uuid())
  name String
  isFrontPage Boolean @default(false)
  site Site @relation(fields: [siteId], references: [id])
  siteId String
  parent Page? @relation("children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @map("pageId")
  layouts PageLayout[]
  instances PageInstance[]
  children Page[] @relation("children")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("pageCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("pageUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model PageInstance {
  id String @id @default(uuid())
  title String
  description String?
  slug String
  path String
  localeCode String
  config String @default("") @db.NVarChar(MAX)
  pageId String
  page Page @relation(fields: [pageId], references: [id])
  layouts PageInstanceLayout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("pageInstanceCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("pageInstanceUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model PageInstanceLayout {
  id String @id @default(uuid())
  pageInstance PageInstance @relation(fields: [pageInstanceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pageInstanceId String
  pageLayout PageLayout @relation(fields: [pageLayoutId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pageLayoutId String
  publishingEnvironment PublishingEnvironment @relation(fields: [publishingEnvironmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  publishingEnvironmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("pageInstanceLayoutCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("pageInstanceLayoutUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model PageLayout {
  id String @id @default(uuid())
  name String
  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId String
  versions PageLayoutVersion[]
  instances PageInstanceLayout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("pageLayoutCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("pageLayoutUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model PageLayoutVersion {
  id String @id @default(uuid())
  content String @db.NVarChar(MAX)
  wasPublished Boolean @default(false)
  layout PageLayout @relation(fields: [pageLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageLayoutId String
  publications PageLayoutVersionPublication[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("pageLayoutVersionCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("pageLayoutVersionUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model PageLayoutVersionPublication {
  id String @id @default(uuid())
  version PageLayoutVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String
  environment PublishingEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("pageLayoutVersionPublicationCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("pageLayoutVersionPublicationUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model ContentBlock {
  id String @id @default(uuid())
  name String
  type String
  children ChildContentBlock[] @relation("parentContentBlock")
  parents ChildContentBlock[] @relation("childContentBlock")
  variants ContentBlockVariant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("contentBlockCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("contentBlockUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model ChildContentBlock {
  id String @id @default(uuid())
  parent ContentBlock @relation("parentContentBlock", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  parentId String
  child ContentBlock @relation("childContentBlock", fields: [childId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  childId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("childContentBlockCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("childContentBlockUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model ContentBlockVariant {
  id String @id @default(uuid())
  name String
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id])
  contentBlockId String
  versions ContentBlockVariantVersion[]
  sites ContentBlockVariantOnSite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("contentBlockVariantCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("contentBlockVariantUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model ContentBlockVariantOnSite {
  id String @id @default(uuid())
  variant ContentBlockVariant @relation(fields: [variantId], references: [id])
  variantId String
  site Site @relation(fields: [siteId], references: [id])
  siteId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("contentBlockVariantOnSiteCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("contentBlockVariantOnSiteUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model ContentBlockVariantVersion {
  id String @id @default(uuid())
  content String @db.NVarChar(MAX)
  localeCode String @default("")
  slug String @default("")
  wasPublished Boolean @default(false)
  variant ContentBlockVariant @relation(fields: [contentBlockVariantId], references: [id])
  contentBlockVariantId String
  publications ContentBlockVariantVersionPublication[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("contentBlockVariantVersionCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("contentBlockVariantVersionUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model ContentBlockVariantVersionPublication {
  id String @id @default(uuid())
  version ContentBlockVariantVersion @relation(fields: [versionId], references: [id])
  versionId String
  environment PublishingEnvironment @relation(fields: [environmentId], references: [id])
  environmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("contentBlockVariantVersionPublicationCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("contentBlockVariantVersionPublicationUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model Form {
  id String @id @default(uuid())
  name String
  versions FormVersion[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("formCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("formUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model FormVersion {
  id String @id @default(uuid())
  config String @db.NVarChar(MAX)
  wasPublished Boolean @default(false)
  form Form @relation(fields: [formId], references: [id])
  formId String
  publications FormVersionPublication[]
  submissions FormVersionSubmission[]
  tokens FormVersionToken[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("formVersionCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("formVersionUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model FormVersionPublication {
  id String @id @default(uuid())
  version FormVersion @relation(fields: [versionId], references: [id])
  versionId String
  environment PublishingEnvironment @relation(fields: [environmentId], references: [id])
  environmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdBy User @relation("formVersionPublicationCreatedByUser", fields: [createdByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdByUserId String
  updatedBy User @relation("formVersionPublicationUpdatedByUser", fields: [updatedByUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUserId String
}

model FormVersionToken {
  id String @id @default(uuid())
  localeCode String
  expiresAt DateTime
  site Site @relation(fields: [siteId], references: [id])
  siteId String
  environment PublishingEnvironment @relation(fields: [environmentId], references: [id])
  environmentId String
  version FormVersion @relation(fields: [versionId], references: [id])
  versionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model FormVersionSubmission {
  id String @id @default(uuid())
  data String @db.NVarChar(MAX)
  localeCode String
  site Site @relation(fields: [siteId], references: [id])
  siteId String
  environment PublishingEnvironment @relation(fields: [environmentId], references: [id])
  environmentId String
  version FormVersion @relation(fields: [versionId], references: [id])
  versionId String
  files FormVersionSubmissionFile[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model FormVersionSubmissionFile {
  id String @id @default(uuid())
  mimeType String
  size Int
  originalName String
  submission FormVersionSubmission @relation(fields: [submissionId], references: [id])
  submissionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model User {
  id String @id @default(uuid())
  adUsername String
  firstName String
  lastName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  createdPublishingEnvironments PublishingEnvironment[] @relation("environmentCreatedByUser")
  updatedPublishingEnvironments PublishingEnvironment[] @relation("environmentUpdatedByUser")
  createdLocales Locale[] @relation("localeCreatedByUser")
  updatedLocales Locale[] @relation("localeUpdatedByUser")
  createdSites Site[] @relation("siteCreatedByUser")
  updatedSites Site[] @relation("siteUpdatedByUser")
  createdPages Page[] @relation("pageCreatedByUser")
  updatedPages Page[] @relation("pageUpdatedByUser")
  createdPageLayouts PageLayout[] @relation("pageLayoutCreatedByUser")
  updatedPageLayouts PageLayout[] @relation("pageLayoutUpdatedByUser")
  createdPageLayoutVersions PageLayoutVersion[] @relation("pageLayoutVersionCreatedByUser")
  updatedPageLayoutVersions PageLayoutVersion[] @relation("pageLayoutVersionUpdatedByUser")
  createdPageLayoutVersionPublications PageLayoutVersionPublication[] @relation("pageLayoutVersionPublicationCreatedByUser")
  updatedPageLayoutVersionPublications PageLayoutVersionPublication[] @relation("pageLayoutVersionPublicationUpdatedByUser")
  createdPageInstances PageInstance[] @relation("pageInstanceCreatedByUser")
  updatedPageInstances PageInstance[] @relation("pageInstanceUpdatedByUser")
  createdPageInstanceLayouts PageInstanceLayout[] @relation("pageInstanceLayoutCreatedByUser")
  updatedPageInstanceLayouts PageInstanceLayout[] @relation("pageInstanceLayoutUpdatedByUser")
  createdContentBlocks ContentBlock[] @relation("contentBlockCreatedByUser")
  updatedContentBlocks ContentBlock[] @relation("contentBlockUpdatedByUser")
  createdChildContentBlocks ChildContentBlock[] @relation("childContentBlockCreatedByUser")
  updatedChildContentBlocks ChildContentBlock[] @relation("childContentBlockUpdatedByUser")
  createdContentBlockVariants ContentBlockVariant[] @relation("contentBlockVariantCreatedByUser")
  updatedContentBlockVariants ContentBlockVariant[] @relation("contentBlockVariantUpdatedByUser")
  createdContentBlockVariantsOnSites ContentBlockVariantOnSite[] @relation("contentBlockVariantOnSiteCreatedByUser")
  updatedContentBlockVariantsOnSites ContentBlockVariantOnSite[] @relation("contentBlockVariantOnSiteUpdatedByUser")
  createdContentBlockVariantVersions ContentBlockVariantVersion[] @relation("contentBlockVariantVersionCreatedByUser")
  updatedContentBlockVariantVersions ContentBlockVariantVersion[] @relation("contentBlockVariantVersionUpdatedByUser")
  createdContentBlockVariantVersionPublications ContentBlockVariantVersionPublication[] @relation("contentBlockVariantVersionPublicationCreatedByUser")
  updatedContentBlockVariantVersionPublications ContentBlockVariantVersionPublication[] @relation("contentBlockVariantVersionPublicationUpdatedByUser")
  createdForms Form[] @relation("formCreatedByUser")
  updatedForms Form[] @relation("formUpdatedByUser")
  createdFormVersions FormVersion[] @relation("formVersionCreatedByUser")
  updatedFormVersions FormVersion[] @relation("formVersionUpdatedByUser")
  createdFormVersionPublications FormVersionPublication[] @relation("formVersionPublicationCreatedByUser")
  updatedFormVersionPublications FormVersionPublication[] @relation("formVersionPublicationUpdatedByUser")
}

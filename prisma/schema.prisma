generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url = env("DATABASE_URL")
}

model PublishingEnvironment {
  id String @id @default(uuid())
  name String
  key String @unique
  contentVersionPublications ContentBlockVariantVersionPublication[]
  layoutVersionPublications PageLayoutVersionPublication[]
  pageInstaceLayoutPublications PageInstanceLayout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Site {
  id String @id @default(uuid())
  name String
  key String @unique
  pages Page[]
  contentBlockVariants ContentBlockVariantOnSite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Page {
  id String @id @default(uuid())
  name String
  isFrontPage Boolean @default(false)
  site Site @relation(fields: [siteId], references: [id])
  siteId String
  parent Page? @relation("children", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String? @map("pageId")
  layouts PageLayout[]
  instances PageInstance[]
  children Page[] @relation("children")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PageInstance {
  id String @id @default(uuid())
  title String
  description String?
  slug String
  path String
  localeCode String
  config String @default("") @db.NVarChar(MAX)
  pageId String
  page Page @relation(fields: [pageId], references: [id])
  layouts PageInstanceLayout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PageInstanceLayout {
  id String @id @default(uuid())
  pageInstance PageInstance @relation(fields: [pageInstanceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pageInstanceId String
  pageLayout PageLayout @relation(fields: [pageLayoutId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pageLayoutId String
  publishingEnvironment PublishingEnvironment @relation(fields: [publishingEnvironmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  publishingEnvironmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PageLayout {
  id String @id @default(uuid())
  name String
  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId String
  versions PageLayoutVersion[]
  instances PageInstanceLayout[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PageLayoutVersion {
  id String @id @default(uuid())
  content String @db.NVarChar(MAX)
  wasPublished Boolean @default(false)
  layout PageLayout @relation(fields: [pageLayoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageLayoutId String
  publications PageLayoutVersionPublication[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PageLayoutVersionPublication {
  id String @id @default(uuid())
  version PageLayoutVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String
  environment PublishingEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ContentBlock {
  id String @id @default(uuid())
  name String
  type String
  children ChildContentBlock[] @relation("parentContentBlock")
  parents ChildContentBlock[] @relation("childContentBlock")
  variants ContentBlockVariant[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ChildContentBlock {
  id String @id @default(uuid())
  parent ContentBlock @relation("parentContentBlock", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  parentId String
  child ContentBlock @relation("childContentBlock", fields: [childId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  childId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ContentBlockVariant {
  id String @id @default(uuid())
  name String
  contentBlock ContentBlock @relation(fields: [contentBlockId], references: [id])
  contentBlockId String
  versions ContentBlockVariantVersion[]
  sites ContentBlockVariantOnSite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ContentBlockVariantOnSite {
  id String @id @default(uuid())
  variant ContentBlockVariant @relation(fields: [variantId], references: [id])
  variantId String
  site Site @relation(fields: [siteId], references: [id])
  siteId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ContentBlockVariantVersion {
  id String @id @default(uuid())
  content String @db.NVarChar(MAX)
  locale String
  variant ContentBlockVariant @relation(fields: [contentBlockVariantId], references: [id])
  contentBlockVariantId String
  publications ContentBlockVariantVersionPublication[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ContentBlockVariantVersionPublication {
  id String @id @default(uuid())
  version ContentBlockVariantVersion @relation(fields: [versionId], references: [id])
  versionId String
  environment PublishingEnvironment @relation(fields: [environmentId], references: [id])
  environmentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}
